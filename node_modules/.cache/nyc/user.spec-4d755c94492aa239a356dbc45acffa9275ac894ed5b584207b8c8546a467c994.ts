"use strict";function cov_ksgrlo0w6(){var path="/Users/shivanggarg/Desktop/PracticeNodeTS/src/Services/test/user.spec.ts";var hash="e4fe7e7c6c35536b2681facd8254dfe6de1504a9";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/shivanggarg/Desktop/PracticeNodeTS/src/Services/test/user.spec.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:4,column:15},end:{line:4,column:32}},"2":{start:{line:5,column:23},end:{line:5,column:49}},"3":{start:{line:7,column:0},end:{line:26,column:3}},"4":{start:{line:9,column:4},end:{line:25,column:7}},"5":{start:{line:10,column:8},end:{line:12,column:11}},"6":{start:{line:11,column:12},end:{line:11,column:72}},"7":{start:{line:13,column:8},end:{line:15,column:11}},"8":{start:{line:14,column:12},end:{line:14,column:68}},"9":{start:{line:16,column:8},end:{line:18,column:11}},"10":{start:{line:17,column:12},end:{line:17,column:87}},"11":{start:{line:19,column:8},end:{line:21,column:11}},"12":{start:{line:20,column:12},end:{line:20,column:79}},"13":{start:{line:22,column:8},end:{line:24,column:11}},"14":{start:{line:23,column:12},end:{line:23,column:75}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:32},end:{line:7,column:33}},loc:{start:{line:7,column:38},end:{line:26,column:1}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:9,column:22},end:{line:9,column:23}},loc:{start:{line:9,column:28},end:{line:25,column:5}},line:9},"2":{name:"(anonymous_2)",decl:{start:{line:10,column:39},end:{line:10,column:40}},loc:{start:{line:10,column:45},end:{line:12,column:9}},line:10},"3":{name:"(anonymous_3)",decl:{start:{line:13,column:50},end:{line:13,column:51}},loc:{start:{line:13,column:56},end:{line:15,column:9}},line:13},"4":{name:"(anonymous_4)",decl:{start:{line:16,column:44},end:{line:16,column:45}},loc:{start:{line:16,column:50},end:{line:18,column:9}},line:16},"5":{name:"(anonymous_5)",decl:{start:{line:19,column:69},end:{line:19,column:70}},loc:{start:{line:19,column:75},end:{line:21,column:9}},line:19},"6":{name:"(anonymous_6)",decl:{start:{line:22,column:43},end:{line:22,column:44}},loc:{start:{line:22,column:49},end:{line:24,column:9}},line:22}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{},inputSourceMap:{version:3,file:"/Users/shivanggarg/Desktop/PracticeNodeTS/src/Services/test/user.spec.ts",sources:["/Users/shivanggarg/Desktop/PracticeNodeTS/src/Services/test/user.spec.ts"],names:[],mappings:";;AAAA,mBAAmB;AACnB,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,kDAAyG;AACzG,qDAAqD;AACrD,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IAErC,+CAA+C;IAC/C,QAAQ,CAAE,OAAO,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;YACpC,MAAM,CAAC,KAAK,CAAC,IAAA,6BAAc,EAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC9C,MAAM,CAAC,KAAK,CAAC,IAAA,6BAAc,EAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACxC,MAAM,CAAC,KAAK,CAAC,IAAA,gCAAiB,EAAC,UAAU,CAAC,EAAE,SAAS,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;YACjE,MAAM,CAAC,KAAK,CAAC,IAAA,gCAAiB,EAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QAChD,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;YACvC,MAAM,CAAC,KAAK,CAAC,IAAA,gCAAiB,EAAC,CAAC,CAAC,EAAC,MAAM,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAA;IAEH,CAAC,CAAC,CAAC;AAEH,CAAC,CAAC,CAAC",sourcesContent:["// Requiring module\nconst assert = require('assert');\nimport { getNameService, createNameService, deleteNameService, UpdateNameService } from '../user.service'\n// We can group similar tests inside a describe block\ndescribe(\"Simple Calculations\", () => {\n\t\n// We can add nested blocks for different tests\ndescribe( \"Test1\", () => {\n\tit(\"Test user getNameService\", () => {\n\tassert.equal(getNameService(0), \"John\");\n\t});\n\n\tit(\"Test user name record is not exist \", () => {\n\t\tassert.equal(getNameService(1), \"\");\n\t});\n\n\tit(\"Test user create name record \", () => {\n\t\tassert.equal(createNameService(\"testbame\"), \"created\");\n\t});\n\n\tit(\"Test user create name record with false undefiend name\", () => {\n\t\tassert.equal(createNameService(\"\"), \"created\");\n\t})\n\n\tit(\"Test user delete name record\", () => {\n\t\tassert.equal(deleteNameService(0),\"John\");\n\t})\n\t\n});\n\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"e4fe7e7c6c35536b2681facd8254dfe6de1504a9"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_ksgrlo0w6=function(){return actualCoverage;};}return actualCoverage;}cov_ksgrlo0w6();cov_ksgrlo0w6().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});// Requiring module
const assert=(cov_ksgrlo0w6().s[1]++,require('assert'));const user_service_1=(cov_ksgrlo0w6().s[2]++,require("../user.service"));// We can group similar tests inside a describe block
cov_ksgrlo0w6().s[3]++;describe("Simple Calculations",()=>{cov_ksgrlo0w6().f[0]++;cov_ksgrlo0w6().s[4]++;// We can add nested blocks for different tests
describe("Test1",()=>{cov_ksgrlo0w6().f[1]++;cov_ksgrlo0w6().s[5]++;it("Test user getNameService",()=>{cov_ksgrlo0w6().f[2]++;cov_ksgrlo0w6().s[6]++;assert.equal((0,user_service_1.getNameService)(0),"John");});cov_ksgrlo0w6().s[7]++;it("Test user name record is not exist ",()=>{cov_ksgrlo0w6().f[3]++;cov_ksgrlo0w6().s[8]++;assert.equal((0,user_service_1.getNameService)(1),"");});cov_ksgrlo0w6().s[9]++;it("Test user create name record ",()=>{cov_ksgrlo0w6().f[4]++;cov_ksgrlo0w6().s[10]++;assert.equal((0,user_service_1.createNameService)("testbame"),"created");});cov_ksgrlo0w6().s[11]++;it("Test user create name record with false undefiend name",()=>{cov_ksgrlo0w6().f[5]++;cov_ksgrlo0w6().s[12]++;assert.equal((0,user_service_1.createNameService)(""),"created");});cov_ksgrlo0w6().s[13]++;it("Test user delete name record",()=>{cov_ksgrlo0w6().f[6]++;cov_ksgrlo0w6().s[14]++;assert.equal((0,user_service_1.deleteNameService)(0),"John");});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3NoaXZhbmdnYXJnL0Rlc2t0b3AvUHJhY3RpY2VOb2RlVFMvc3JjL1NlcnZpY2VzL3Rlc3QvdXNlci5zcGVjLnRzIiwic291cmNlcyI6WyIvVXNlcnMvc2hpdmFuZ2dhcmcvRGVza3RvcC9QcmFjdGljZU5vZGVUUy9zcmMvU2VydmljZXMvdGVzdC91c2VyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQkFBbUI7QUFDbkIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2pDLGtEQUF5RztBQUN6RyxxREFBcUQ7QUFDckQsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUVyQywrQ0FBK0M7SUFDL0MsUUFBUSxDQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUU7UUFDdkIsRUFBRSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtZQUNwQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUEsNkJBQWMsRUFBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7WUFDOUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFBLDZCQUFjLEVBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO1lBQ3hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBQSxnQ0FBaUIsRUFBQyxVQUFVLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx3REFBd0QsRUFBRSxHQUFHLEVBQUU7WUFDakUsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFBLGdDQUFpQixFQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hELENBQUMsQ0FBQyxDQUFBO1FBRUYsRUFBRSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtZQUN2QyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUEsZ0NBQWlCLEVBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUE7SUFFSCxDQUFDLENBQUMsQ0FBQztBQUVILENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gUmVxdWlyaW5nIG1vZHVsZVxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5pbXBvcnQgeyBnZXROYW1lU2VydmljZSwgY3JlYXRlTmFtZVNlcnZpY2UsIGRlbGV0ZU5hbWVTZXJ2aWNlLCBVcGRhdGVOYW1lU2VydmljZSB9IGZyb20gJy4uL3VzZXIuc2VydmljZSdcbi8vIFdlIGNhbiBncm91cCBzaW1pbGFyIHRlc3RzIGluc2lkZSBhIGRlc2NyaWJlIGJsb2NrXG5kZXNjcmliZShcIlNpbXBsZSBDYWxjdWxhdGlvbnNcIiwgKCkgPT4ge1xuXHRcbi8vIFdlIGNhbiBhZGQgbmVzdGVkIGJsb2NrcyBmb3IgZGlmZmVyZW50IHRlc3RzXG5kZXNjcmliZSggXCJUZXN0MVwiLCAoKSA9PiB7XG5cdGl0KFwiVGVzdCB1c2VyIGdldE5hbWVTZXJ2aWNlXCIsICgpID0+IHtcblx0YXNzZXJ0LmVxdWFsKGdldE5hbWVTZXJ2aWNlKDApLCBcIkpvaG5cIik7XG5cdH0pO1xuXG5cdGl0KFwiVGVzdCB1c2VyIG5hbWUgcmVjb3JkIGlzIG5vdCBleGlzdCBcIiwgKCkgPT4ge1xuXHRcdGFzc2VydC5lcXVhbChnZXROYW1lU2VydmljZSgxKSwgXCJcIik7XG5cdH0pO1xuXG5cdGl0KFwiVGVzdCB1c2VyIGNyZWF0ZSBuYW1lIHJlY29yZCBcIiwgKCkgPT4ge1xuXHRcdGFzc2VydC5lcXVhbChjcmVhdGVOYW1lU2VydmljZShcInRlc3RiYW1lXCIpLCBcImNyZWF0ZWRcIik7XG5cdH0pO1xuXG5cdGl0KFwiVGVzdCB1c2VyIGNyZWF0ZSBuYW1lIHJlY29yZCB3aXRoIGZhbHNlIHVuZGVmaWVuZCBuYW1lXCIsICgpID0+IHtcblx0XHRhc3NlcnQuZXF1YWwoY3JlYXRlTmFtZVNlcnZpY2UoXCJcIiksIFwiY3JlYXRlZFwiKTtcblx0fSlcblxuXHRpdChcIlRlc3QgdXNlciBkZWxldGUgbmFtZSByZWNvcmRcIiwgKCkgPT4ge1xuXHRcdGFzc2VydC5lcXVhbChkZWxldGVOYW1lU2VydmljZSgwKSxcIkpvaG5cIik7XG5cdH0pXG5cdFxufSk7XG5cbn0pO1xuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6InlqSkFnQkk7eUtBaEJKO0FBQ0EsS0FBTUEsT0FBTSx5QkFBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBVixDQUFaLENBQ0EseUVBQ0E7dUJBQ0FDLFFBQVEsQ0FBQyxxQkFBRCxDQUF3QixJQUFLLCtDQUVyQztBQUNBQSxRQUFRLENBQUUsT0FBRixDQUFXLElBQUssK0NBQ3ZCQyxFQUFFLENBQUMsMEJBQUQsQ0FBNkIsSUFBSywrQ0FDcENILE1BQU0sQ0FBQ0ksS0FBUCxDQUFhLGtDQUFlLENBQWYsQ0FBYixDQUFnQyxNQUFoQyxFQUNDLENBRkMsQ0FBRixDQUR1Qix1QkFLdkJELEVBQUUsQ0FBQyxxQ0FBRCxDQUF3QyxJQUFLLCtDQUM5Q0gsTUFBTSxDQUFDSSxLQUFQLENBQWEsa0NBQWUsQ0FBZixDQUFiLENBQWdDLEVBQWhDLEVBQ0EsQ0FGQyxDQUFGLENBTHVCLHVCQVN2QkQsRUFBRSxDQUFDLCtCQUFELENBQWtDLElBQUssZ0RBQ3hDSCxNQUFNLENBQUNJLEtBQVAsQ0FBYSxxQ0FBa0IsVUFBbEIsQ0FBYixDQUE0QyxTQUE1QyxFQUNBLENBRkMsQ0FBRixDQVR1Qix3QkFhdkJELEVBQUUsQ0FBQyx3REFBRCxDQUEyRCxJQUFLLGdEQUNqRUgsTUFBTSxDQUFDSSxLQUFQLENBQWEscUNBQWtCLEVBQWxCLENBQWIsQ0FBb0MsU0FBcEMsRUFDQSxDQUZDLENBQUYsQ0FidUIsd0JBaUJ2QkQsRUFBRSxDQUFDLDhCQUFELENBQWlDLElBQUssZ0RBQ3ZDSCxNQUFNLENBQUNJLEtBQVAsQ0FBYSxxQ0FBa0IsQ0FBbEIsQ0FBYixDQUFrQyxNQUFsQyxFQUNBLENBRkMsQ0FBRixDQUlBLENBckJPLENBQVIsQ0F1QkMsQ0ExQk8sQ0FBUiIsIm5hbWVzIjpbImFzc2VydCIsInJlcXVpcmUiLCJkZXNjcmliZSIsIml0IiwiZXF1YWwiXSwic291cmNlcyI6WyIvVXNlcnMvc2hpdmFuZ2dhcmcvRGVza3RvcC9QcmFjdGljZU5vZGVUUy9zcmMvU2VydmljZXMvdGVzdC91c2VyLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUmVxdWlyaW5nIG1vZHVsZVxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5pbXBvcnQgeyBnZXROYW1lU2VydmljZSwgY3JlYXRlTmFtZVNlcnZpY2UsIGRlbGV0ZU5hbWVTZXJ2aWNlLCBVcGRhdGVOYW1lU2VydmljZSB9IGZyb20gJy4uL3VzZXIuc2VydmljZSdcbi8vIFdlIGNhbiBncm91cCBzaW1pbGFyIHRlc3RzIGluc2lkZSBhIGRlc2NyaWJlIGJsb2NrXG5kZXNjcmliZShcIlNpbXBsZSBDYWxjdWxhdGlvbnNcIiwgKCkgPT4ge1xuXHRcbi8vIFdlIGNhbiBhZGQgbmVzdGVkIGJsb2NrcyBmb3IgZGlmZmVyZW50IHRlc3RzXG5kZXNjcmliZSggXCJUZXN0MVwiLCAoKSA9PiB7XG5cdGl0KFwiVGVzdCB1c2VyIGdldE5hbWVTZXJ2aWNlXCIsICgpID0+IHtcblx0YXNzZXJ0LmVxdWFsKGdldE5hbWVTZXJ2aWNlKDApLCBcIkpvaG5cIik7XG5cdH0pO1xuXG5cdGl0KFwiVGVzdCB1c2VyIG5hbWUgcmVjb3JkIGlzIG5vdCBleGlzdCBcIiwgKCkgPT4ge1xuXHRcdGFzc2VydC5lcXVhbChnZXROYW1lU2VydmljZSgxKSwgXCJcIik7XG5cdH0pO1xuXG5cdGl0KFwiVGVzdCB1c2VyIGNyZWF0ZSBuYW1lIHJlY29yZCBcIiwgKCkgPT4ge1xuXHRcdGFzc2VydC5lcXVhbChjcmVhdGVOYW1lU2VydmljZShcInRlc3RiYW1lXCIpLCBcImNyZWF0ZWRcIik7XG5cdH0pO1xuXG5cdGl0KFwiVGVzdCB1c2VyIGNyZWF0ZSBuYW1lIHJlY29yZCB3aXRoIGZhbHNlIHVuZGVmaWVuZCBuYW1lXCIsICgpID0+IHtcblx0XHRhc3NlcnQuZXF1YWwoY3JlYXRlTmFtZVNlcnZpY2UoXCJcIiksIFwiY3JlYXRlZFwiKTtcblx0fSlcblxuXHRpdChcIlRlc3QgdXNlciBkZWxldGUgbmFtZSByZWNvcmRcIiwgKCkgPT4ge1xuXHRcdGFzc2VydC5lcXVhbChkZWxldGVOYW1lU2VydmljZSgwKSxcIkpvaG5cIik7XG5cdH0pXG5cdFxufSk7XG5cbn0pO1xuIl19