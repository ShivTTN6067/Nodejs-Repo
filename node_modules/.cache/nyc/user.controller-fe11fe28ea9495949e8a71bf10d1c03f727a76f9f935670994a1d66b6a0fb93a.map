{"version":3,"file":"/Users/shivanggarg/Desktop/PracticeNodeTS/src/Controller/user.controller.ts","sources":["/Users/shivanggarg/Desktop/PracticeNodeTS/src/Controller/user.controller.ts"],"names":[],"mappings":";;;AACA,2DAAgH;AAEhH;;;;;;;;GAQG;AACI,MAAM,OAAO,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACvE,MAAM,IAAI,GAAG,IAAA,6BAAc,EAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,CAAC,CAAC;AACrC,CAAC,CAAA;AAHY,QAAA,OAAO,WAGnB;AAED;;;;;;;;GAQG;AACI,MAAM,UAAU,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IAC1E,MAAM,QAAQ,GAAG,IAAA,gCAAiB,EAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,GAAG,EAAC,QAAQ,EAAC,CAAC,CAAC;AACzC,CAAC,CAAA;AAHY,QAAA,UAAU,cAGtB;AAED;;;;;;;;GAQG;AACI,MAAM,UAAU,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IAC1E,MAAM,QAAQ,GAAG,IAAA,gCAAiB,EAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,GAAG,EAAC,QAAQ,EAAC,CAAC,CAAC;AACzC,CAAC,CAAA;AAHY,QAAA,UAAU,cAGtB;AAED;;;;;;;;GAQG;AACI,MAAM,UAAU,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IAC1E,MAAM,QAAQ,GAAG,IAAA,gCAAiB,EAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;IACpE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,GAAG,EAAC,QAAQ,EAAC,CAAC,CAAC;AACzC,CAAC,CAAA;AAHY,QAAA,UAAU,cAGtB","sourcesContent":["import { Request, Response, NextFunction, Errback, Router } from 'express';\nimport {getNameService, createNameService, deleteNameService, UpdateNameService} from '../Services/user.service'\n\n/**\n * Renders name when `/getUser/:Id` route is requested\n *\n * @param req - Object - Express request object\n * @param res - Object - Express response object\n * @param next - Function - express callback\n *\n * @returns {object}\n */\nexport const getName = (req: Request, res: Response, next: NextFunction) => {\n    const name = getNameService(Number(req.params.Id));\n    res.status(200).send({msg:name});\n}\n\n/**\n * Create name record when `/createUser` route is requested\n *\n * @param req - Object - Express request object\n * @param res - Object - Express response object\n * @param next - Function - express callback\n *\n * @returns {object}\n */\nexport const createName = (req: Request, res: Response, next: NextFunction) => {\n    const response = createNameService(req.body.name);\n    res.status(201).send({msg:response});\n}\n\n/**\n * Delete name record when `/deleteUser/:Id` route is requested\n *\n * @param req - Object - Express request object\n * @param res - Object - Express response object\n * @param next - Function - express callback\n *\n * @returns {object}\n */\nexport const deleteUser = (req: Request, res: Response, next: NextFunction) => {\n    const response = deleteNameService(Number(req.params.Id));\n    res.status(200).send({msg:response});\n}\n\n/**\n * Update name record when `/updateUser/:Id` route is requested\n *\n * @param req - Object - Express request object\n * @param res - Object - Express response object\n * @param next - Function - express callback\n *\n * @returns {object}\n */\nexport const updateUser = (req: Request, res: Response, next: NextFunction) => {\n    const response = UpdateNameService(Number(req.params.Id), req.body);\n    res.status(201).send({msg:response});\n}\n"]}